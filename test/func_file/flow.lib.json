{
  "Flow_Dag_Yaml": "desc: \"Agent: write a website\"\n\noutputs:\n  overview:\n    type: html\n    reference: ${TestModification}\n\nnodes:\n  - name: DemandUnderstand\n    speak: \"optimize your needs..\"\n    source:\n      path: Planning_Prompt_Enhance\n      func: Func_Prompt_Enhance\n    inputs:\n      task: ${inputs.input_text}\n\n  - name: Coding\n    speak: \"coding your website..\"\n    source:\n      path: Planning_Coding\n      func: Func_Coding\n    inputs:\n      gui: ${DemandUnderstand.gui}\n      ideas: ${DemandUnderstand.ideas}\n      language: ${DemandUnderstand.language}\n      modality: ${DemandUnderstand.modality}\n      task: ${DemandUnderstand.task}\n\n  - name: CodeComplete\n    speak: \"complete your code..\"\n    source:\n      path: Planning_CodeComplete\n      func: Func_Coding\n    inputs:\n      unimplemented_file: ${Coding.unimplemented_file}\n      codes: ${Coding.output}\n      language: ${DemandUnderstand.language}\n      modality: ${DemandUnderstand.modality}\n      task: ${DemandUnderstand.task}\n\n  - name: CodeReviewComment\n    speak: \"code review your code..\"\n    source:\n      path: Planning_CodeReviewComment\n    inputs:\n      codes: ${CodeComplete.output}\n      ideas: ${DemandUnderstand.ideas}\n      language: ${DemandUnderstand.language}\n      modality: ${DemandUnderstand.modality}\n      task: ${DemandUnderstand.task}\n\n  - name: CodeReviewModification\n    speak: \"code review & rewrite your code..\"\n    source:\n      path: Planning_CodeReviewModification\n      func: Func_Coding\n    inputs:\n      comments: ${CodeReviewComment.output}\n      codes: ${CodeComplete.output}\n      ideas: ${DemandUnderstand.ideas}\n      language: ${DemandUnderstand.language}\n      modality: ${DemandUnderstand.modality}\n      task: ${DemandUnderstand.task}\n\n  - name: TestErrorSummary\n    speak: \"testing..\"\n    source:\n      path: Planning_TestErrorSummary\n    inputs:\n      test_reports: \"js & css should inline in index.html\"\n      codes: ${CodeReviewModification.output}\n      language: ${DemandUnderstand.language}\n\n  - name: TestModification\n    speak: \"rewrite success..\"\n    source:\n      path: Planning_TestModification\n      func: Func_Coding\n    inputs:\n      error_summary: ${TestErrorSummary.output}\n      test_reports: ${TestErrorSummary.output}\n      codes: ${CodeReviewModification.output}\n      language: ${DemandUnderstand.language}\n\n",
  "Planning_Prompt_Enhance": "[You are an professional prompt engineer that can improve user input prompt to make LLM better understand these prompts.]\n\nI will give you a short description of a software design requirement,\nplease rewrite it into a detailed prompt that can make large language model know how to make this software better based this prompt,\nthe prompt should ensure LLMs build a software that can be run correctly, which is the most import part you need to consider.\nremember that the revised prompt should not contain more than 200 words,\nhere is the short description:\"{task}\".\nIf the revised prompt is revised_version_of_the_description,\nthen you should return a message in a format like \"<INFO> revised_version_of_the_description\", do not return messages in other formats.",
  "Planning_Coding": "According to the new user's task and our software designs listed below: \nTask: \"{task}\".\nModality: \"{modality}\".\nProgramming Language: \"{language}\"\nIdeas:\"{ideas}\"\nWe have decided to complete the task through the \"index.html\".  As the {assistant_role}, to satisfy the new user's demands, you should write a \"index.html\" and make sure that every detail of the architecture is, in the end, implemented as code.  {gui}\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core elements, inline js, inline css that will be necessary, as well as a quick comment on their purpose.\nThen you will output the content of the file including complete code.\nlike this:\nindex.html\n```html\nCODE\n```\nPlease note that the code should be fully functional.   Ensure to implement all functions.",
  "Func_Coding": "let codes = \"\"\r\nlet output = node.output\r\nif (output !== \"\") {\r\n    const regex =/```html(.*?)```/mgs\r\n    let match;\r\n    while ((match = regex.exec(output)) !== null) {\r\n        codes = match[1];\r\n    }\r\n}\r\nnode.output = codes\r\nnode.speak = \"coding...\"\r\nnode.unimplemented_file = \"index.html\"",
  "Planning_CodeComplete": "According to the new user's task and our software designs listed below: \nTask: \"{task}\".\nModality: \"{modality}\".\nProgramming Language: \"{language}\"\nCodes:\n\"{codes}\"\n\nSince we are a single page site, js and css code need to be inline within the page, \nlike this:\nindex.html\n```html\nCODE\n```\nAs the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all elements in the \"index.html\" file. ",
  "Planning_CodeReviewComment": "According to the new user's task and our software designs:\nTask: \"{task}\".\nModality: \"{modality}\".\nProgramming Language: \"{language}\"\nIdeas: \"{ideas}\"\nCodes:\n\"{codes}\"\nAs the {assistant_role}, to make the software directly operable without further coding,  inline JavaScript should formulated the following regulations:\n1) all referenced classes should be imported;\n2) all methods should be implemented;\n3) all methods need to have the necessary comments;\n4) no potential bugs;\nNow, you should review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix.\nNow, tell me your comment with the highest priority and corresponding suggestions on revision.",
  "Planning_CodeReviewModification": "According to the new user's task, our designed product modality, languages and ideas, our developed first-edition source codes are listed below: \nTask: \"{task}\".\nModality: \"{modality}\".\nProgramming Language: \"{language}\"\nIdeas: \"{ideas}\"\nCodes: \n\"{codes}\"\nComments on Codes:\n\"{comments}\"\n\nSince we are a single page site, js and css code need to be inline within the page, format like this:\n\nindex.html\n```html\nCODE\n```\n\nAs the {assistant_role}, to satisfy the new user's demand and make the software creative, executive and robust, you should modify corresponding codes according to the comments. Then, output the fixed codes strictly following the required format.",
  "Planning_TestErrorSummary": "Our developed source codes and corresponding test reports are listed below: \nProgramming Language: \"{language}\"\nSource Codes:\n\"{codes}\"\nTest Reports of Source Codes:\n\"{test_reports}\"\nAccording to my test reports, please locate and summarize the bugs that cause the problem.",
  "Planning_TestModification": "Our developed source codes and corresponding test reports are listed below: \nProgramming Language: \"{language}\"\nSource Codes:\n\"{codes}\"\nTest Reports of Source Codes:\n\"{test_reports}\"\nError Summary of Test Reports:\n\"{error_summary}\"\n\nThen you will output the content of the file including complete code.\nlike this:\nindex.html\n```html\nCODE\n```\nAs the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary.  Now, use the format exemplified above and modify the problematic codes based on the error summary.  Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above"
}
